from typing import List, Tuple
from pathlib import Path
import textwrap
from .utils import Transcription



class AssStyle:
    def __init__(
        self,
        name: str = 'default',
        font: str = "Arial",
        font_size: int = 48,
        primary_color: Tuple[int, int, int, int] = (0, 255, 255, 255),
        secondary_color: Tuple[int, int, int, int] = (0, 0, 0, 255),
        outline_color: Tuple[int, int, int, int] = (0, 0, 0, 0),
        back_color: Tuple[int, int, int, int] = (0, 0, 0, 0),
        bold: bool = False,
        italic: bool = False,
        underline: bool = False,
        strikeout: bool = False,
        scale_x: int = 100,
        scale_y: int = 100,
        spacing: int = 0,
        angle: int = 0,
        border_style: int = 1,
        outline: int = 2,
        shadow: int = 2,
        alignment: int = 2,
        margin_l: int = 10,
        margin_r: int = 10,
        margin_v: int = 10,
        encoding: int = 1,
    ):
        self.name = name
        self.font = font
        self.font_size = font_size
        self.primary_color = primary_color
        self.secondary_color = secondary_color
        self.outline_color = outline_color
        self.back_color = back_color
        self.bold = bold
        self.italic = italic
        self.underline = underline
        self.strikeout = strikeout
        self.scale_x = scale_x
        self.scale_y = scale_y
        self.spacing = spacing
        self.angle = angle
        self.border_style = border_style
        self.outline = outline
        self.shadow = shadow
        self.alignment = alignment
        self.margin_l = margin_l
        self.margin_r = margin_r
        self.margin_v = margin_v
        self.encoding = encoding

    @staticmethod
    def _color_to_ass(argb: Tuple[int, int, int, int]) -> str:
        a, r, g, b = argb
        return f"&H{a:02X}{b:02X}{g:02X}{r:02X}"

    @staticmethod
    def _bool_to_ass(flag: bool) -> int:
        return -1 if flag else 0

    def to_ass(self) -> str:
        return (
            f"Style: {self.name},{self.font},{self.font_size},"
            f"{self._color_to_ass(self.primary_color)},"
            f"{self._color_to_ass(self.secondary_color)},"
            f"{self._color_to_ass(self.outline_color)},"
            f"{self._color_to_ass(self.back_color)},"
            f"{self._bool_to_ass(self.bold)},{self._bool_to_ass(self.italic)},"
            f"{self._bool_to_ass(self.underline)},{self._bool_to_ass(self.strikeout)},"
            f"{self.scale_x},{self.scale_y},{self.spacing},{self.angle},"
            f"{self.border_style},{self.outline},{self.shadow},{self.alignment},"
            f"{self.margin_l},{self.margin_r},{self.margin_v},{self.encoding}"
        )

class AssGenerator:
    def __init__(self, file_name : str, transcriptions : list[Transcription], styles : List[AssStyle]|None = None):
        self.file_name = file_name
        self.info_header = textwrap.dedent('''\
            [Script Info]
            ; Script generated by whisper_video_translator
            ; By Calc1te
            Title: {_Title}
            ScriptType: v4.00+
            WrapStyle: 0
            ScaledBorderAndShadow: yes
            YCbCr Matrix: TV.709
            PlayResX: {_VidResX}
            PlayResY: {_VidResY}
        ''')
        styles_header = textwrap.dedent('''\
            \n[V4+ Styles]
            Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
        ''')
        if styles is None:
            default = AssStyle()
            print('Warning: No subtitle style given, using a default one...')
            styles = [default]
        self.styles = styles_header + "\n".join(s.to_ass() for s in styles)

        events_header = textwrap.dedent('''\
            \n[Events]
            Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
        ''')
        self.events = events_header + "\n".join(f'Dialogue: 0, {t.start}, {t.end}, {styles[0].name},,0,0,0,,{t.text}' for t in transcriptions)


    def save(self, ResX : int, ResY : int, Title = None):
        path = Path('ass/' + self.file_name + '.ass')
        _Title = f"{self.file_name} by Calc1te's whisper ass generator" if Title is None else Title
        
        info_text = self.info_header.format(_Title = _Title, _VidResX = ResX, _VidResY = ResY)

        content = "\n".join([info_text.strip(), self.styles.strip(), self.events.strip()])

        with open(path, "w", encoding="utf-8-sig") as f:
            f.write(content)

        print(f"Subtitle saved to: {path}")
        return path
